services:
  sonarqube:
    container_name: sonarqube
    image: sonarqube:community
    environment:
      SONAR_JDBC_URL: "jdbc:postgresql://sonar_db:5432/sonarqube"
      SONAR_JDBC_USERNAME: "sonar"
      SONAR_JDBC_PASSWORD: "sonar"
    ports:
      - "9001:9000"
    volumes:
      - sonarqube_data:/opt/data/sonarqube/data
      - sonarqube_logs:/opt/data/sonarqube/logs
      - sonarqube_extensions:/opt/data/sonarqube/extensions
    expose:
      - 9000
    depends_on:
      - sonar_db
    networks:
      - sonarqube_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/about"]
      interval: 10s
      timeout: 30s
      retries: 5
  sonar_db:
    container_name: sonarqube_db
    image: postgres:17
    environment:
      POSTGRES_DB: "sonarqube"
      POSTGRES_USER: "sonar"
      POSTGRES_PASSWORD: "sonar"
    ports:
      - "5432:5432"
    volumes:
      - postgresql:/var/lib/postgresql
      - postgresql_data:/var/lib/postgresql/data
    networks:
      - sonarqube_network
      - sonar_no_internet
      
  sonarscaner:
    restart: on-failure
    container_name: sonarscanner
    image: sonarsource/sonar-scanner-cli:latest
    environment:
      SONAR_HOST_URL: "http://sonarqube:9000"
      SONAR_TOKEN: "sqa_c5f1197a2af142a08e5a2447e96a068ddd505931"
    volumes:
      - ./Spring-Kafka/projects/producer/:/usr/src/
    depends_on:
      - sonarqube
      - sonar_db
    networks:
      - sonarqube_network
      - sonar_no_internet

volumes:
  sonarqube_data:
  sonarqube_logs:
  sonarqube_extensions:
  postgresql:
  postgresql_data:

networks:
  sonarqube_network:
    driver: bridge
  sonar_no_internet:
    driver: bridge
    internal: true